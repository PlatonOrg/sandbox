"""
Django settings for sandbox project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import logging
import os
import sys
import platform
import threading

from apscheduler.triggers.cron import CronTrigger
from pathlib import Path
from docker.types import Ulimit

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-h9u-nn=)$8h*$w8#$=0ln@(aw$07i@-wjxa*!z6%d_*_ax7flf"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Set to true when 'python3 manage.py test' is used
TESTING = sys.argv[1:2] == ["test"]

ALLOWED_HOSTS = ["127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "sandbox",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wsgi.application"
ASGI_APPLICATION = "asgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LOGGER_ADDRESS = "/dev/log"
if platform.system() == "Darwin":
    # https://docs.python.org/3/library/logging.handlers.html#sysloghandler
    LOGGER_ADDRESS = "/var/run/syslog"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "verbose": {
            "format": (
                "[%(asctime)-15s] [%(pathname)s]"
                "[%(filename)s:%(funcName)s:%(lineno)d]"
                " %(levelname)s -- %(message)s"
            ),
            "datefmt": "%Y/%m/%d %H:%M:%S",
        },
        "simple": {
            "format": (
                "[%(asctime)s] [%(filename)s:%(funcName)s:%(lineno)d]"
                " %(levelname)s -- %(message)s"
            ),
            "datefmt": "%H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "syslog": {
            "level": "INFO",
            "class": "logging.handlers.SysLogHandler",
            "facility": "local6",
            "address": LOGGER_ADDRESS,
            "formatter": "verbose",
            "filters": ["require_debug_false"],
        },
        "syslog_debug": {
            "level": "DEBUG",
            "class": "logging.handlers.SysLogHandler",
            "facility": "local6",
            "address": LOGGER_ADDRESS,
            "formatter": "verbose",
            "filters": ["require_debug_true"],
        },
        "mail_admins": {
            "level": "WARNING",
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
            "formatter": "verbose",
        },
    },
    "loggers": {
        "sandbox": {
            "handlers": ["console", "syslog", "mail_admins", "syslog_debug"],
            "level": "DEBUG",
            "propagate": True,
        },
        "django": {
            "handlers": ["console", "syslog", "mail_admins", "syslog_debug"],
            "level": "INFO",
        },
        "django.request": {
            "handlers": ["console", "syslog", "syslog_debug"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SANDBOX_VERSION = "3.1.0"

# External libraries will be added to containers in /utils/libs/, this directory will be added
# to both PATH and PYTHONPATH environment variables.
# Each external lib must be a tuple (GIT_URL, ALIAS), where GIT_URL is the URL 'git clone'
# will use, ALIAS the directory in which the library will be cloned.
EXTERNAL_LIBRARIES = [
    ("https://github.com/PremierLangage/premierlangage-lib.git", "pl"),
    ("https://github.com/PlatonOrg/platon-lib.git", "platon"),
]

# Path where the libraries are downloaded
EXTERNAL_LIBRARIES_ROOT = os.path.join(BASE_DIR, "libs")
if not os.path.isdir(EXTERNAL_LIBRARIES_ROOT):
    os.makedirs(EXTERNAL_LIBRARIES_ROOT)

EXTERNAL_LIBRARIES_CRON_TRIGGER = CronTrigger(
    year="*",
    month="*",
    day="*",
    week="*",
    day_of_week="*",
    hour="*/2",
    minute="0",
    second="0",
)

#
# DOCKER_COUNT (int) – Max number of containers running simultaneously.
# DOCKER_VOLUME_MEM_LIMIT (int) – Limit of memory usage for volumes (in MB).
# DOCKER_VOLUME_HOST_BASEDIR (str) – Path to the root directory containing each directory shared
#       with the containers. For each container, a directory named after the container's name is
#       created inside DOCKER_VOLUME_HOST_BASEDIR.
#
# DOCKER_PARAMETERS (dict) - kwargs given to the Containers constructor. See
# https://docker-py.readthedocs.io/en/stable/containers.html and
# https://docs.docker.com/config/containers/resource_constraints/ for more information about
# every argument


DOCKER_COUNT = 20 if not TESTING else 5
DOCKER_VOLUME_HOST_BASEDIR = os.path.join(BASE_DIR, "containers_env")
DOCKER_PARAMETERS = {
    "image": "pl:latest",
    "auto_remove": True,
    "cpu_period": 1000,
    "cpu_shares": 1024,
    "cpu_quota": 0,
    "cpuset_cpus": "0",
    "detach": True,
    "environment": {},
    "mem_limit": "100m",
    "memswap_limit": "200m",
    "network_mode": "none",
    "network_disabled": True,
    # "storage_opt":      {},
    "tty": True,
    "ulimits": [Ulimit(name="core", soft=0, hard=0)],
}


# Time before returning a '503: Service Unavailable' when waiting for a container.
WAIT_FOR_CONTAINER_DURATION = 2

# Total time for an '/execute/' request before timeout
EXECUTE_TIMEOUT = 10.0

# Directory where environments are stored
ENVIRONMENT_ROOT = os.path.join(BASE_DIR, "environments")
if not os.path.isdir(ENVIRONMENT_ROOT):
    os.makedirs(ENVIRONMENT_ROOT)

# ENVIRONMENT_EXPIRATION: Time before the environment are deleted.
HOUR = 3600
DAY = HOUR * 24
ENVIRONMENT_EXPIRATION = DAY


# Check if any of the above settings are override by a config.py file.
logger = logging.getLogger(__name__)
try:
    from config import *  # noqa

    logger.info("Using config.py...")
except ModuleNotFoundError:
    logger.info("No config file found")
del logger


from sandbox.containers import initialise_containers  # noqa


INITIALISING_THREAD = threading.Thread(target=initialise_containers)
INITIALISING_THREAD.start()
